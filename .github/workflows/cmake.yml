name: CMake

on:
  push:
    branches: [ "master", "github-workflow" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup OpenCV
      # You may pin to the exact commit or the version.
      # uses: Dovyski/setup-opencv-action@24af96460aeb1d3127f13698550f6a21ebb6a22c
      uses: Dovyski/setup-opencv-action@v1
      with:
        # OpenCV version to be installed.
        opencv-version: 4.5.2
        # If opencv-contrib (extra modules) should be included in the instalation.
        opencv-extra-modules: true
        # If dependencies should be installed as well.
        install-deps: true
        # 
        # CMAKE_BUILD_TYPE: # optional, default is RELEASE
        # 
        # CMAKE_CXX_COMPILER: # optional, default is g++
        # 
        # CMAKE_INSTALL_PREFIX: # optional, default is /usr/local
        # 
        # WITH_TBB: # optional, default is true
        # 
        # WITH_IPP: # optional, default is true
        # 
        # BUILD_NEW_PYTHON_SUPPORT: # optional
        # 
        # WITH_V4L: # optional
        # 
        # ENABLE_PRECOMPILED_HEADERS: # optional, default is true
        # 
        # INSTALL_C_EXAMPLES: # optional
        # 
        # INSTALL_PYTHON_EXAMPLES: # optional
        # 
        # BUILD_EXAMPLES: # optional
        # 
        # WITH_QT: # optional
        # 
        # WITH_OPENGL: # optional
    
    - name: install dependencies
      run: ./morbslam_installer.sh

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
